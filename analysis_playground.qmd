---
title: "analysis"
subtitle: Due 12/18/2023
author: "Evan Kim"
format: 
  html:
    self-contained: true
---

```{r setup, echo=FALSE, message=FALSE}
#| include: false
library(tidyverse)
library(sf)
library(dplyr)
library(knitr)

# If running on the department server, uncomment the lines below
#
# - We would also recommend rendering this assignment on https://hypatia.stat.duke.edu 
#   or https://katherinej.stat.duke.edu for better performance.

#flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
# flexiblas::flexiblas_switch()
# flexiblas::flexiblas_set_num_threads(8)
```

-----



```{r}
# Read the CSV file into a dataframe
df <- read.csv('data/SPY_data_wrangling/SPY_ready_for_analysis.csv', header = TRUE)

# Binomial model
model <- glm(MondayOpenComparedToFridayCloseChangeInPercent ~ FridayCloseComparedToThursdayCloseChangeInPercent + FridayIntradayChangeInPercent, 
                      data = df, family = gaussian)

# Print the summary of the model
summary(model)


```

```{r}
df2 <- read.csv('data/SPY_data_wrangling/SPY_ready_for_analysis.csv', header = TRUE)

# Binomial model
model2 <- glm(WasMondayOpenHigherThanFridayClose	 ~ didFridayCloseHigherThanThursdayClose, 
                      data = df2, family = binomial)


# Gaussian model
model2_binomial <- glm(WasMondayOpenHigherThanFridayClose	 ~ wasFridayIntradayPositive, 
                      data = df2, family = binomial)
# Print the summary of the model
summary(model2)
summary(model2_binomial)
```


```{r}
df3 <- read.csv('data/adding_triple_witch_to_SPY/SPY_ready_for_analysis_triple_witch.csv', header = TRUE)

# Binomial model
model3 <- glm(WasMondayOpenHigherThanFridayClose ~ didFridayCloseHigherThanThursdayClose + wasFridayIntradayPositive * fridayWasATripleWitchDay, 
                      data = df3, family = binomial)

# Print the summary of the model
summary(model3)




```


```{r}
library(dplyr)
library(ggplot2)

# Assuming df3 is your dataframe

# Create a new column for the specified condition
df3 <- df3 %>%
  mutate(SpecialCondition = ifelse(fridayWasATripleWitchDay == 1 & didFridayCloseHigherThanThursdayClose == 0, "Condition Met", "Other"))

# Calculate ratios
ratios <- df3 %>%
  group_by(SpecialCondition) %>%
  summarise(
    Ones = sum(WasMondayOpenHigherThanFridayClose == 1),
    Zeros = sum(WasMondayOpenHigherThanFridayClose == 0),
    Ratio = Ones / Zeros,
    .groups = 'drop'
  )

# Print the ratios
print(ratios)


```

```{r}
df4 <- read.csv('data/addingNonfarmPayrolls/SPY_ready_for_analysis_triple_witch_NFP.csv', header = TRUE)

ggplot(df4, aes(x = MondayOpenToFridayCloseRatio)) + 
    geom_density(fill = "blue", alpha = 0.5) +
    labs(title = "Density of Monday Open to Friday Close Ratio",
         x = "Monday Open to Friday Close Ratio",
         y = "Density")



```

```{r}
columns_to_plot <- names(df4)[names(df4) != "MondayOpenToFridayCloseRatio"]

# Function to create a plot for each column
create_plot <- function(col_name) {
    p <- ggplot(df4, aes_string(x = col_name, y = "MondayOpenToFridayCloseRatio")) +
        geom_point() +
        labs(title = paste("MondayOpenToFridayCloseRatio vs", col_name),
             x = col_name,
             y = "MondayOpenToFridayCloseRatio")
    print(p)
}

# Apply the function to each column in the list
lapply(columns_to_plot, create_plot)
```


```{r}
df4 <- read.csv('data/addingNonfarmPayrolls/SPY_ready_for_analysis_triple_witch_NFP.csv', header = TRUE)


df4$NFPOutcomeIsShock <- ifelse(df4$NFPOutcome == "Shock", 1, 0)
# Binomial model
model4 <- glm(WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + fridayWasATripleWitchDay, 
                      data = df4, family = binomial)


# Print the summary of the model
summary(model4)



```


```{r}
df6 <- read.csv('data/addingUmichSentiment/SPY_ready_for_analysis_triple_witch_NFP_CSI.csv', header = TRUE)
summary(df6$CSIActualMinusExpected)
table(df6$WasMondayOpenHigherThanFridayClose)

boxplot(CSIActualMinusExpected ~ WasMondayOpenHigherThanFridayClose, data = df6, main = "CSIActualMinusExpected vs WasMondayOpenHigherThanFridayClose")


library(ggplot2)
ggplot(df6, aes(x = CSIActualMinusExpected, fill = factor(WasMondayOpenHigherThanFridayClose))) + 
  geom_density(alpha = 0.5) +
  labs(fill = "WasMondayOpenHigher")

# T-test or Mann-Whitney U Test (depending on data distribution)
t.test(CSIActualMinusExpected ~ WasMondayOpenHigherThanFridayClose, data = df6)

```


```{r}
df6$CSIOutcomeIsShock <- ifelse(df6$CSIOutcome == "Shock", 1, 0)
table(df6$CSIOutcomeIsShock, df6$WasMondayOpenHigherThanFridayClose)

chisq.test(table(df6$CSIOutcomeIsShock, df6$WasMondayOpenHigherThanFridayClose))
```




```{r}
df6 <- read.csv('data/addingUmichSentiment/SPY_ready_for_analysis_triple_witch_NFP_CSI.csv', header = TRUE)
df6$NFPOutcomeIsShock <- ifelse(df6$NFPOutcome == "Shock", 1, 0)
df6$CSIOutcomeIsShock <- ifelse(df6$CSIOutcome == "Shock", 1, 0)

# Binomial model

model6 <- glm(WasMondayCloseHigherThanFridayClose ~ wasFridayIntradayPositive + NFPOutcomeIsShock + fridayWasATripleWitchDay + CSIOutcomeIsShock, 
                      data = df6, family = binomial)


# Print the summary of the model
summary(model6)



```


```{r}
df7 <- read.csv('data/addingFOMC/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC.csv', header = TRUE)



df7$NFPOutcomeIsShock <- ifelse(df7$NFPOutcome == "Shock", 1, 0)
df7$CSIOutcomeIsShock <- ifelse(df7$CSIOutcome == "Shock", 1, 0)



df7_filtered <- rbind(df7[1:220, ], df7[264:nrow(df7), ])
df7_filtered$NFPOutcomeIsShock <- ifelse(df7_filtered$NFPOutcome == "Shock", 1, 0)
df7_filtered$CSIOutcomeIsShock <- ifelse(df7_filtered$CSIOutcome == "Shock", 1, 0)
df7_filtered$PrecedingWeekFridayVolumeMINUSPrecedingWeekThursdayVolume <- (df7_filtered$PrecedingWeekFridayVolume) - (df7_filtered$PrecedingWeekThursdayVolume)
#df7$FridayCloseToFridayOpenRatio <- (df$PrecedingWeekFridayClose) / (df$PrecedingWeekFridayOpen)


model7BUYFRICLOSESELLMONOPEN <- glm(WasMondayOpenHigherThanFridayClose ~ wasFridayIntradayPositive, 
                      data = df7_filtered, family = binomial)
summary(model7BUYFRICLOSESELLMONOPEN)





# wasFridayIntradayPositive
#model7BUYFRICLOSESELLMONclose <- glm(WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + fridayWasATripleWitchDay, 
#                      data = df7_filtered, family = binomial)
  

#summary(model7BUYFRICLOSESELLMONclose)

```

```{r}
df8 <- read.csv('data/addingFOMC/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC_with_month.csv', header = TRUE)
#df8 <- rbind(df8[1:220, ], df8[264:nrow(df8), ])
df8$NFPOutcomeIsShock <- ifelse(df8$NFPOutcome == "Shock", 1, 0)
df8$CSIOutcomeIsShock <- ifelse(df8$CSIOutcome == "Shock", 1, 0)
df8$PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO <- (df8$PrecedingWeekFridayVolume) / (df8$PrecedingWeekThursdayVolume)


null_model <- glm(WasMondayOpenHigherThanFridayClose ~ 1, 
                  data = df8, family = binomial)
summary(null_model)
full_model <- glm(WasMondayOpenHigherThanFridayClose ~ didFridayCloseHigherThanThursdayClose + FridayCloseComparedToThursdayCloseChangeInPercent + wasFridayIntradayPositive + FridayIntradayChangeInPercent + fridayWasATripleWitchDay + NFPDayOrNot + NFPOutcome + CSIOutcome + CSIDayOrNot + wasItFOMCWeek + FOMCAction + FOMCActualVSExpected + FOMCActionSpecial + NFPOutcomeIsShock + CSIOutcomeIsShock + PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO, 
                  data = df8, family = binomial)
summary(full_model)



forward_model <- step(null_model, 
                      scope = list(lower = null_model, upper = full_model), 
                      direction = "forward")
```



```{r}
summary(forward_model)
```
```{r}
backward_model <- step(full_model, direction = "backward")
summary(forward_model)
```
```{r}
non_random_model <- glm(formula = WasMondayOpenHigherThanFridayClose ~ CSIOutcomeIsShock + 
    wasFridayIntradayPositive + FridayIntradayChangeInPercent + 
    didFridayCloseHigherThanThursdayClose, family = binomial, 
    data = df8)
summary(non_random_model)
```
## why PrecedingWeekFridayMonth should be random effect
```{r}
df8$PrecedingWeekFridayMonth <- factor(df8$PrecedingWeekFridayMonth, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

table(df8$PrecedingWeekFridayMonth)
aggregate(WasMondayOpenHigherThanFridayClose ~ PrecedingWeekFridayMonth, data = df8, mean)
library(ggplot2)
ggplot(df8, aes(x = PrecedingWeekFridayMonth, fill = factor(WasMondayOpenHigherThanFridayClose))) +
  geom_bar(position = "fill") +
  ylab("Proportion")

```

```{r}
contingency_table_months <- table(df8$PrecedingWeekFridayMonth, df8$WasMondayOpenHigherThanFridayClose)
print(contingency_table_months)
# Perform the Chi-square test
chi_sq_test_months <- chisq.test(contingency_table_months)

# Output the result
chi_sq_test_months
```

## chi-squared
```{r}
# Assign new groupings based on seasons
df8$Month <- with(df8, factor(
  ifelse(PrecedingWeekFridayMonth %in% c("Mar", "Jan", "May", "Sept"), "Odd", "Even")))


# Create a new contingency table with the season groupings
contingency_table_Month <- table(df8$Month, df8$WasMondayOpenHigherThanFridayClose)

# Perform the Chi-square test with the new grouping
chi_sq_test_Month <- chisq.test(contingency_table_Month)

# Output the result
chi_sq_test_Month

```


```{r}
library(lme4)


mixed_model <- glmer(WasMondayOpenHigherThanFridayClose ~ CSIOutcomeIsShock + 
                     wasFridayIntradayPositive + FridayIntradayChangeInPercent + 
                     didFridayCloseHigherThanThursdayClose + 
                     (1 | Month), 
                     family = binomial, data = df8)
summary(mixed_model)
```



```{r}
library(lme4)

anova(non_random_model, mixed_model)

```



```{r}
#summary(glm(formula = WasMondayOpenHigherThanFridayClose ~ CSIOutcomeIsShock + 
#    wasFridayIntradayPositive + FridayIntradayChangeInPercent, family = binomial, 
#    data = df8))
```


```{r}
#create df8$non_random_model_predict and df8$mixed_model_predict by going through each row of df8
# Predict with the non-random model
df8$non_random_model_predict <- as.integer(predict(non_random_model, type = "response") > 0.5)

# Predict with the mixed model
# Note: For mixed models, if you want to include random effects in predictions, use re.form = NULL
df8$mixed_model_predict <- as.integer(predict(mixed_model, re.form = NULL, type = "response") > 0.5)

```



```{r}
non_random_model_right_wrong <- c(0, 0)
mixed_model_right_wrong <- c(0, 0)

# Iterate through each row of df8
for (i in 1:nrow(df8)) {
  # For the non-random model
  if (df8$WasMondayOpenHigherThanFridayClose[i] == df8$non_random_model_predict[i]) {
    non_random_model_right_wrong[1] <- non_random_model_right_wrong[1] + 1
  } else {
    non_random_model_right_wrong[2] <- non_random_model_right_wrong[2] + 1
  }

  # For the mixed model
  if (df8$WasMondayOpenHigherThanFridayClose[i] == df8$mixed_model_predict[i]) {
    mixed_model_right_wrong[1] <- mixed_model_right_wrong[1] + 1
  } else {
    mixed_model_right_wrong[2] <- mixed_model_right_wrong[2] + 1
  }
}

# Print the results
print(non_random_model_right_wrong)
print(non_random_model_right_wrong[1] / (non_random_model_right_wrong[1] + non_random_model_right_wrong[2]))

print(mixed_model_right_wrong)
print(mixed_model_right_wrong[1] / (mixed_model_right_wrong[1] + mixed_model_right_wrong[2]))
```

```{r}
# save df to .csv
# Save df8 to a CSV file
write.csv(df8, file = "results/SPY_non_mixed_and_mixed_model.csv", row.names = FALSE)

```



