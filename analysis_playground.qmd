---
title: "analysis"
subtitle: Due 12/18/2023
author: "Evan Kim"
format: 
  html:
    self-contained: true
---

```{r setup, echo=FALSE, message=FALSE}
#| include: false
library(tidyverse)
library(sf)
library(dplyr)
library(knitr)

# If running on the department server, uncomment the lines below
#
# - We would also recommend rendering this assignment on https://hypatia.stat.duke.edu 
#   or https://katherinej.stat.duke.edu for better performance.

#flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
# flexiblas::flexiblas_switch()
# flexiblas::flexiblas_set_num_threads(8)
```

-----



```{r, echo=FALSE}
# Read the CSV file into a dataframe
#df <- read.csv('data/SPY_data_wrangling/SPY_ready_for_analysis.csv', header = TRUE)

# Binomial model
#model <- glm(MondayOpenComparedToFridayCloseChangeInPercent ~ FridayCloseComparedToThursdayCloseChangeInPercent + FridayIntradayChangeInPercent, 
#                      data = df, family = gaussian)

# Print the summary of the model
#summary(model)


```

```{r, echo=FALSE}
df2 <- read.csv('data/SPY_data_wrangling/SPY_ready_for_analysis.csv', header = TRUE)

# Binomial model
model2 <- glm(WasMondayOpenHigherThanFridayClose	 ~ didFridayCloseHigherThanThursdayClose, 
                      data = df2, family = binomial)


# Gaussian model
model2_binomial <- glm(WasMondayOpenHigherThanFridayClose	 ~ wasFridayIntradayPositive, 
                      data = df2, family = binomial)
# Print the summary of the model
summary(model2)
summary(model2_binomial)
```


```{r, echo=FALSE}
df3 <- read.csv('data/adding_triple_witch_to_SPY/SPY_ready_for_analysis_triple_witch.csv', header = TRUE)

# Binomial model
model3 <- glm(WasMondayOpenHigherThanFridayClose ~ didFridayCloseHigherThanThursdayClose + wasFridayIntradayPositive * fridayWasATripleWitchDay, 
                      data = df3, family = binomial)

# Print the summary of the model
summary(model3)




```


```{r, echo=FALSE}
library(dplyr)
library(ggplot2)

# Assuming df3 is your dataframe

# Create a new column for the specified condition
#df3 <- df3 %>%
#  mutate(SpecialCondition = ifelse(fridayWasATripleWitchDay == 1 & didFridayCloseHigherThanThursdayClose == 0, "Condition #Met", "Other"))

# Calculate ratios
#ratios <- df3 %>%
#  group_by(SpecialCondition) %>%
#  summarise(
#    Ones = sum(WasMondayOpenHigherThanFridayClose == 1),
#    Zeros = sum(WasMondayOpenHigherThanFridayClose == 0),
#    Ratio = Ones / Zeros,
#    .groups = 'drop'
#  )

# Print the ratios
#print(ratios)


```


## MONDAY OPEN TO FRIDAY CLOSE RATIO DENSITY PLOT & MONDAY CLOSE TO FRIDAY CLOSE RATIO DENSITY PLOT
```{r, warning=FALSE, message=FALSE}
df4 <- read.csv('data/addingFOMC/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC_with_month.csv', header = TRUE)
df4$MondayCloseToFridayCloseRatio <- df4$FollowingWeekMondayClose / df4$PrecedingWeekFridayClose

ggplot(df4, aes(x = MondayOpenToFridayCloseRatio)) + 
    geom_density(fill = "blue", alpha = 0.5) +
  scale_x_continuous(trans = 'log', limits = c(0.95, 1.05)) +
    labs(title = "Density of Monday Open to Friday Close Ratio",
         x = "Monday Open to Friday Close Ratio",
         y = "Density")

ggplot(df4, aes(x = MondayCloseToFridayCloseRatio)) + 
    geom_density(fill = "pink", alpha = 0.5) +
    scale_x_continuous(trans = 'log', limits = c(0.95, 1.05)) +
    labs(title = "Density of Monday Close to Friday Close Ratio",
         x = "Monday Close to Friday Close Ratio",
         y = "Density")



```


## WasMondayOpenHigherThanFridayClose and WasMondayCloseHigherThanFridayClose BREAKDOWN
```{r}
#1 vs 0 proportion break down table with percentages for df4$WasMondayOpenHigherThanFridayClose and df4$WasMondayCloseHigherThanFridayClose

# Count occurrences for WasMondayOpenHigherThanFridayClose
table_open <- table(df4$WasMondayOpenHigherThanFridayClose)

# Convert counts to proportions and then to percentages for WasMondayOpenHigherThanFridayClose
percentage_open <- prop.table(table_open) * 100

# Count occurrences for WasMondayCloseHigherThanFridayClose
table_close <- table(df4$WasMondayCloseHigherThanFridayClose)

# Convert counts to proportions and then to percentages for WasMondayCloseHigherThanFridayClose
percentage_close <- prop.table(table_close) * 100



formatted_yes_open <- sprintf("%.1f%%", percentage_open[2])
formatted_no_open <- sprintf("%.1f%%", percentage_open[1])
formatted_yes_close <- sprintf("%.1f%%", percentage_close[2])
formatted_no_close <- sprintf("%.1f%%", percentage_close[1])



breakdown_table <- data.frame(
  Category = c('Monday Open Price > Friday Close Price', 'Monday Close Price > Friday Close Price'),
  Yes = c(formatted_yes_open, formatted_yes_close),
  No = c(formatted_no_open, formatted_no_close)
  
)

library(knitr)
# Print the table
kable(breakdown_table, caption = "Proportions of Monday Open and Close vs. Friday Close", format = "html")

```


## WasMondayOpenHigherThanFridayClose vs NFPOutcomeIsShock BREAKDOWN
```{r}
df4$NFPOutcomeIsShock <- ifelse(df4$NFPOutcome == "Shock", 1, 0)


#1. breakdown table of WasMondayOpenHigherThanFridayClose (1 vs 0) and NFPOutcomeIsShock (1 vs 0)
breakdown_table_monday_open_vs_nfp_shock <- table(df4$WasMondayOpenHigherThanFridayClose, df4$NFPOutcomeIsShock)
rownames(breakdown_table_monday_open_vs_nfp_shock) <- c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close")
colnames(breakdown_table_monday_open_vs_nfp_shock) <- c("Nonfarm Payrolls Non-shock", "Nonfarm Payrolls Shock")
breakdown_table_column_percentages <- prop.table(breakdown_table_monday_open_vs_nfp_shock, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df <- as.data.frame.matrix(breakdown_table_column_percentages)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted <- data.frame(lapply(breakdown_table_column_percentages_df, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayOpenHigherThanFridayClose_vs_NFPOutcomeIsShock <- data.frame(
  . = c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close"),
  NFP_Nonshock = c(breakdown_table_column_percentages_df_formatted[1][[1]][1], breakdown_table_column_percentages_df_formatted[1][[1]][2]),
  NFP_Shock = c(breakdown_table_column_percentages_df_formatted[2][[1]][1], breakdown_table_column_percentages_df_formatted[2][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayOpenHigherThanFridayClose_vs_NFPOutcomeIsShock, caption = "Proportion Breakdown of Monday Open Higher Than Friday Close vs Nonfarm Payroll Shock", format = "html")
```

## WasMondayCloseHigherThanFridayClose vs NFPOutcomeIsShock BREAKDOWN
```{r}
df4$NFPOutcomeIsShock <- ifelse(df4$NFPOutcome == "Shock", 1, 0)


#1. breakdown table of WasMondayCloseHigherThanFridayClose (1 vs 0) and NFPOutcomeIsShock (1 vs 0)
breakdown_table_monday_close_vs_nfp_shock <- table(df4$WasMondayCloseHigherThanFridayClose, df4$NFPOutcomeIsShock)
rownames(breakdown_table_monday_close_vs_nfp_shock) <- c("Monday Close Lower Than Friday Close", "Monday Close Higher Than Friday Close")
colnames(breakdown_table_monday_close_vs_nfp_shock) <- c("Nonfarm Payrolls Non-shock", "Nonfarm Payrolls Shock")
breakdown_table_column_percentages2 <- prop.table(breakdown_table_monday_close_vs_nfp_shock, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df2 <- as.data.frame.matrix(breakdown_table_column_percentages2)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted2 <- data.frame(lapply(breakdown_table_column_percentages_df2, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayCloseHigherThanFridayClose_vs_NFPOutcomeIsShock <- data.frame(
  . = c("Monday Close Lower Than Friday Close", "Monday Close Higher Than Friday Close"),
  NFP_Nonshock = c(breakdown_table_column_percentages_df_formatted2[1][[1]][1], breakdown_table_column_percentages_df_formatted2[1][[1]][2]),
  NFP_Shock = c(breakdown_table_column_percentages_df_formatted2[2][[1]][1], breakdown_table_column_percentages_df_formatted2[2][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayCloseHigherThanFridayClose_vs_NFPOutcomeIsShock, caption = "Proportion Breakdown of Monday Close Higher Than Friday Close vs Nonfarm Payroll Shock", format = "html")
```


## so, yeah maybe NFPIsShock should be a predictor when WasMondayCloseHigherThanFridayClose is the reponse, but maybe not for when WasMondayOpenHigherThanFridayClose is the response?


```{r, echo=FALSE}
#columns_to_plot <- names(df4)[names(df4) != "MondayOpenToFridayCloseRatio"]

# Function to create a plot for each column
#create_plot <- function(col_name) {
#    p <- ggplot(df4, aes_string(x = col_name, y = "MondayOpenToFridayCloseRatio")) +
#        geom_point() +
#        labs(title = paste("MondayOpenToFridayCloseRatio vs", col_name),
#             x = col_name,
#             y = "MondayOpenToFridayCloseRatio")
#    print(p)
#}

# Apply the function to each column in the list
#lapply(columns_to_plot, create_plot)
```


```{r, echo=FALSE}
#df4 <- read.csv('data/addingNonfarmPayrolls/SPY_ready_for_analysis_triple_witch_NFP.csv', header = TRUE)



# Binomial model
#model4 <- glm(WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + fridayWasATripleWitchDay, 
#                      data = df4, family = binomial)


# Print the summary of the model
#summary(model4)



```

## WasMondayOpenHigherThanFridayClose vs CSIActualMinusExpected DISTRIBUTION
```{r}
#summary(df4$CSIActualMinusExpected)
#table(df4$WasMondayOpenHigherThanFridayClose)

#boxplot(CSIActualMinusExpected ~ WasMondayOpenHigherThanFridayClose, data = df6, main = "CSIActualMinusExpected vs WasMondayOpenHigherThanFridayClose")


library(ggplot2)
ggplot(df4, aes(x = CSIActualMinusExpected, fill = factor(WasMondayOpenHigherThanFridayClose))) + 
  geom_density(alpha = 0.5) +
  labs(fill = "WasMondayOpenHigher")

# T-test or Mann-Whitney U Test (depending on data distribution)
t.test(CSIActualMinusExpected ~ WasMondayOpenHigherThanFridayClose, data = df4)

```

## WasMondayOpenHigherThanFridayClose vs CSIOutcomeIsShock BREAKDOWN
```{r}
df4$CSIOutcomeIsShock <- ifelse(df4$CSIOutcome == "Shock", 1, 0)


#1. breakdown table of WasMondayOpenHigherThanFridayClose (1 vs 0) and CSIOutcomeIsShock (1 vs 0)
breakdown_table_monday_open_vs_csi_shock <- table(df4$WasMondayOpenHigherThanFridayClose, df4$CSIOutcomeIsShock)
rownames(breakdown_table_monday_open_vs_csi_shock) <- c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close")
colnames(breakdown_table_monday_open_vs_csi_shock) <- c("Consumer Sentiment Index Non-shock", "Consumer Sentiment Index Shock")
breakdown_table_column_percentages_csi <- prop.table(breakdown_table_monday_open_vs_csi_shock, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df_csi <- as.data.frame.matrix(breakdown_table_column_percentages_csi)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted_csi <- data.frame(lapply(breakdown_table_column_percentages_df_csi, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayOpenHigherThanFridayClose_vs_CSIOutcomeIsShock <- data.frame(
  . = c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close"),
  CSI_Nonshock = c(breakdown_table_column_percentages_df_formatted_csi[1][[1]][1], breakdown_table_column_percentages_df_formatted_csi[1][[1]][2]),
  CSI_Shock = c(breakdown_table_column_percentages_df_formatted_csi[2][[1]][1], breakdown_table_column_percentages_df_formatted_csi[2][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayOpenHigherThanFridayClose_vs_CSIOutcomeIsShock, caption = "Proportion Breakdown of Monday Open Higher Than Friday Close vs Consumer Sentiment Index Shock", format = "html")


#also a chi-square test on proportion of WasMondayOpenHigherThanFridayClose=1 and WasMondayOpenHigherThanFridayClose=0 being the same between CSIOutcomeIsShock=1 and CSIOutcomeIsShock=0
chi_square_test_WasMondayOpenHigherThanFridayClose_vs_CSIOutcomeIsShock <- chisq.test(breakdown_table_monday_open_vs_csi_shock)

# Print the results of the Chi-Square Test
print(chi_square_test_WasMondayOpenHigherThanFridayClose_vs_CSIOutcomeIsShock)
```



## WasMondayCloseHigherThanFridayClose vs CSIActualMinusExpected DISTRIBUTION
```{r}
#summary(df4$CSIActualMinusExpected)
#table(df4$WasMondayOpenHigherThanFridayClose)

#boxplot(CSIActualMinusExpected ~ WasMondayOpenHigherThanFridayClose, data = df6, main = "CSIActualMinusExpected vs WasMondayOpenHigherThanFridayClose")


library(ggplot2)
ggplot(df4, aes(x = CSIActualMinusExpected, fill = factor(WasMondayCloseHigherThanFridayClose))) + 
  geom_density(alpha = 0.5) +
  labs(fill = "WasMondayCloseHigher")

# T-test or Mann-Whitney U Test (depending on data distribution)
t.test(CSIActualMinusExpected ~ WasMondayCloseHigherThanFridayClose, data = df4)

```

## WasMondayCloseHigherThanFridayClose vs CSIOutcomeIsShock BREAKDOWN
```{r}
#df4$CSIOutcomeIsShock <- ifelse(df4$CSIOutcome == "Shock", 1, 0)


#1. breakdown table of WasMondayCloseHigherThanFridayClose (1 vs 0) and CSIOutcomeIsShock (1 vs 0)
breakdown_table_monday_close_vs_csi_shock <- table(df4$WasMondayCloseHigherThanFridayClose, df4$CSIOutcomeIsShock)
rownames(breakdown_table_monday_close_vs_csi_shock) <- c("Monday Close Lower Than Friday Close", "Monday Close Higher Than Friday Close")
colnames(breakdown_table_monday_close_vs_csi_shock) <- c("Consumer Sentiment Index Non-shock", "Consumer Sentiment Index Shock")
breakdown_table_column_percentages_csiCLOSE <- prop.table(breakdown_table_monday_close_vs_csi_shock, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df_csiCLOSE <- as.data.frame.matrix(breakdown_table_column_percentages_csiCLOSE)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted_csiCLOSE <- data.frame(lapply(breakdown_table_column_percentages_df_csiCLOSE, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayCloseHigherThanFridayClose_vs_CSIOutcomeIsShock <- data.frame(
  . = c("Monday Close Lower Than Friday Close", "Monday Close Higher Than Friday Close"),
  CSI_Nonshock = c(breakdown_table_column_percentages_df_formatted_csiCLOSE[1][[1]][1], breakdown_table_column_percentages_df_formatted_csiCLOSE[1][[1]][2]),
  CSI_Shock = c(breakdown_table_column_percentages_df_formatted_csiCLOSE[2][[1]][1], breakdown_table_column_percentages_df_formatted_csiCLOSE[2][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayCloseHigherThanFridayClose_vs_CSIOutcomeIsShock, caption = "Proportion Breakdown of Monday Close Higher Than Friday Close vs Consumer Sentiment Index Shock", format = "html")


#also a chi-square test on proportion of WasMondayOpenHigherThanFridayClose=1 and WasMondayOpenHigherThanFridayClose=0 being the same between CSIOutcomeIsShock=1 and CSIOutcomeIsShock=0
chi_square_test_WasMondayCloseHigherThanFridayClose_vs_CSIOutcomeIsShock <- chisq.test(breakdown_table_monday_close_vs_csi_shock)

# Print the results of the Chi-Square Test
print(chi_square_test_WasMondayCloseHigherThanFridayClose_vs_CSIOutcomeIsShock)
```

# so yeah, maybe CSIActualMinusExpected could be a predictor for WasMondayCloseHigherThanFridayClose, while CSIOutcomeIsShock can be one for WasMondayOpenHigherThanFridayClose?
```{r, echo=FALSE}
#df6$CSIOutcomeIsShock <- ifelse(df6$CSIOutcome == "Shock", 1, 0)
#table(df6$CSIOutcomeIsShock, df6$WasMondayOpenHigherThanFridayClose)

#chisq.test(table(df6$CSIOutcomeIsShock, df6$WasMondayOpenHigherThanFridayClose))
```




```{r, echo=FALSE}
#df6 <- read.csv('data/addingUmichSentiment/SPY_ready_for_analysis_triple_witch_NFP_CSI.csv', header = TRUE)
#df6$NFPOutcomeIsShock <- ifelse(df6$NFPOutcome == "Shock", 1, 0)
#df6$CSIOutcomeIsShock <- ifelse(df6$CSIOutcome == "Shock", 1, 0)

# Binomial model

#model6 <- glm(WasMondayCloseHigherThanFridayClose ~ wasFridayIntradayPositive + NFPOutcomeIsShock + fridayWasATripleWitchDay + CSIOutcomeIsShock, 
#                      data = df6, family = binomial)


# Print the summary of the model
#summary(model6)



```



## WasMondayOpenHigherThanFridayClose vs FOMCAction BREAKDOWN
```{r}

#1. breakdown table of WasMondayOpenHigherThanFridayClose (1 vs 0) and FOMCAction (Pause, Hike, SuperHike, etc...)
breakdown_table_monday_open_vs_fomc_action <- table(df4$WasMondayOpenHigherThanFridayClose, df4$FOMCAction)
rownames(breakdown_table_monday_open_vs_fomc_action) <- c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close")
colnames(breakdown_table_monday_open_vs_fomc_action) <- c("", "Cut", "Hike", "Pause", "SuperCut", "SuperHike")
breakdown_table_column_percentages_FOMC <- prop.table(breakdown_table_monday_open_vs_fomc_action, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df_FOMC <- as.data.frame.matrix(breakdown_table_column_percentages_FOMC)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted_FOMC <- data.frame(lapply(breakdown_table_column_percentages_df_FOMC, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayOpenHigherThanFridayClose_vs_FOMCAction <- data.frame(
  . = c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close"),
  SuperCut = c(breakdown_table_column_percentages_df_formatted_FOMC[5][[1]][1], breakdown_table_column_percentages_df_formatted_FOMC[5][[1]][2]),
  Cut = c(breakdown_table_column_percentages_df_formatted_FOMC[2][[1]][1], breakdown_table_column_percentages_df_formatted_FOMC[2][[1]][2]),
  Pause = c(breakdown_table_column_percentages_df_formatted_FOMC[4][[1]][1], breakdown_table_column_percentages_df_formatted_FOMC[4][[1]][2]),
  Hike = c(breakdown_table_column_percentages_df_formatted_FOMC[3][[1]][1], breakdown_table_column_percentages_df_formatted_FOMC[3][[1]][2]),
  SuperHike = c(breakdown_table_column_percentages_df_formatted_FOMC[6][[1]][1], breakdown_table_column_percentages_df_formatted_FOMC[6][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayOpenHigherThanFridayClose_vs_FOMCAction, caption = "Proportion Breakdown of Monday Open Higher Than Friday Close vs FOMC Actions", format = "html")


#also a chi-square test on proportion of WasMondayOpenHigherThanFridayClose=1 and WasMondayOpenHigherThanFridayClose=0 being the same between CSIOutcomeIsShock=1 and CSIOutcomeIsShock=0
chi_square_test_WasMondayOpenHigherThanFridayClose_vs_FOMCaction <- chisq.test(breakdown_table_monday_open_vs_fomc_action)

# Print the results of the Chi-Square Test
print(chi_square_test_WasMondayOpenHigherThanFridayClose_vs_FOMCaction)
```

## WasMondayCloseHigherThanFridayClose vs FOMCAction BREAKDOWN
```{r}

#1. breakdown table of WasMondayCloseHigherThanFridayClose (1 vs 0) and FOMCAction (Pause, Hike, SuperHike, etc...)
breakdown_table_monday_close_vs_fomc_action <- table(df4$WasMondayCloseHigherThanFridayClose, df4$FOMCAction)
rownames(breakdown_table_monday_close_vs_fomc_action) <- c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close")
colnames(breakdown_table_monday_close_vs_fomc_action) <- c("", "Cut", "Hike", "Pause", "SuperCut", "SuperHike")
breakdown_table_column_percentages_FOMCCLOSE <- prop.table(breakdown_table_monday_close_vs_fomc_action, 2) * 100
#print(breakdown_table_column_percentages)
breakdown_table_column_percentages_df_FOMCCLOSE <- as.data.frame.matrix(breakdown_table_column_percentages_FOMCCLOSE)

# Format each value to one decimal place with a percentage sign
breakdown_table_column_percentages_df_formatted_FOMCCLOSE <- data.frame(lapply(breakdown_table_column_percentages_df_FOMCCLOSE, function(x) sprintf("%.1f%%", x)))

# Print the formatted dataframe
#print(breakdown_table_column_percentages_df_formatted)


breakdown_table_WasMondayCloseHigherThanFridayClose_vs_FOMCAction <- data.frame(
  . = c("Monday Open Lower Than Friday Close", "Monday Open Higher Than Friday Close"),
  SuperCut = c(breakdown_table_column_percentages_df_formatted_FOMCCLOSE[5][[1]][1], breakdown_table_column_percentages_df_formatted_FOMCCLOSE[5][[1]][2]),
  Cut = c(breakdown_table_column_percentages_df_formatted_FOMCCLOSE[2][[1]][1], breakdown_table_column_percentages_df_formatted_FOMCCLOSE[2][[1]][2]),
  Pause = c(breakdown_table_column_percentages_df_formatted_FOMCCLOSE[4][[1]][1], breakdown_table_column_percentages_df_formatted_FOMCCLOSE[4][[1]][2]),
  Hike = c(breakdown_table_column_percentages_df_formatted_FOMCCLOSE[3][[1]][1], breakdown_table_column_percentages_df_formatted_FOMCCLOSE[3][[1]][2]),
  SuperHike = c(breakdown_table_column_percentages_df_formatted_FOMCCLOSE[6][[1]][1], breakdown_table_column_percentages_df_formatted_FOMCCLOSE[6][[1]][2])
  
)


library(knitr)
# Print the table
kable(breakdown_table_WasMondayCloseHigherThanFridayClose_vs_FOMCAction, caption = "Proportion Breakdown of Monday Close Higher Than Friday Close vs FOMC Actions", format = "html")


#also a chi-square test on proportion of WasMondayOpenHigherThanFridayClose=1 and WasMondayOpenHigherThanFridayClose=0 being the same between CSIOutcomeIsShock=1 and CSIOutcomeIsShock=0
chi_square_test_WasMondayCloseHigherThanFridayClose_vs_FOMCaction <- chisq.test(breakdown_table_monday_close_vs_fomc_action)

# Print the results of the Chi-Square Test
print(chi_square_test_WasMondayCloseHigherThanFridayClose_vs_FOMCaction)
```

# so, yeah, maybe FOMC action is not that significant, despite how much media loves to owe monday results to "last wednesday"'s action/sentiment...
```{r}
#df7 <- read.csv('data/addingFOMC/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC.csv', header = TRUE)



#df7$NFPOutcomeIsShock <- ifelse(df7$NFPOutcome == "Shock", 1, 0)
#df7$CSIOutcomeIsShock <- ifelse(df7$CSIOutcome == "Shock", 1, 0)



#df7_filtered <- rbind(df7[1:220, ], df7[264:nrow(df7), ])
#df7_filtered$NFPOutcomeIsShock <- ifelse(df7_filtered$NFPOutcome == "Shock", 1, 0)
#df7_filtered$CSIOutcomeIsShock <- ifelse(df7_filtered$CSIOutcome == "Shock", 1, 0)
#df7_filtered$PrecedingWeekFridayVolumeMINUSPrecedingWeekThursdayVolume <- (df7_filtered$PrecedingWeekFridayVolume) - (df7_filtered$PrecedingWeekThursdayVolume)
#df7$FridayCloseToFridayOpenRatio <- (df$PrecedingWeekFridayClose) / (df$PrecedingWeekFridayOpen)


#model7BUYFRICLOSESELLMONOPEN <- glm(WasMondayOpenHigherThanFridayClose ~ wasFridayIntradayPositive, 
#                      data = df7_filtered, family = binomial)
#summary(model7BUYFRICLOSESELLMONOPEN)





# wasFridayIntradayPositive
#model7BUYFRICLOSESELLMONclose <- glm(WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + CSIActualMinusExpected, 
#                      data = df7, family = binomial)
  

#summary(model7BUYFRICLOSESELLMONclose)

```

## WasMondayOpenHigherThanFridayClose: why PrecedingWeekFridayMonth should be random effect for 
```{r}
df4$PrecedingWeekFridayMonth <- factor(df4$PrecedingWeekFridayMonth, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

table(df4$PrecedingWeekFridayMonth)
aggregate(WasMondayOpenHigherThanFridayClose ~ PrecedingWeekFridayMonth, data = df4, mean)
library(ggplot2)
ggplot(df4, aes(x = PrecedingWeekFridayMonth, fill = factor(WasMondayOpenHigherThanFridayClose))) +
  geom_bar(position = "fill") +
  ylab("Proportion")

```

```{r}
contingency_table_monthsOPEN <- table(df4$PrecedingWeekFridayMonth, df4$WasMondayOpenHigherThanFridayClose)
print(contingency_table_monthsOPEN)
# Perform the Chi-square test
chi_sq_test_monthsOPEN <- chisq.test(contingency_table_monthsOPEN)

# Output the result
chi_sq_test_monthsOPEN
```

```{r}
# Assign new groupings based on seasons
df4$Month <- with(df4, factor(
  ifelse(PrecedingWeekFridayMonth %in% c("Mar", "Jan", "May", "Sept"), "Odd", "Even")))


# Create a new contingency table with the season groupings
contingency_table_MonthOPEN <- table(df4$Month, df4$WasMondayOpenHigherThanFridayClose)

# Perform the Chi-square test with the new grouping
chi_sq_test_MonthOPEN <- chisq.test(contingency_table_MonthOPEN, correct=FALSE)

# Output the result
chi_sq_test_MonthOPEN

```


## WasMondayCloseHigherThanFridayClose: why PrecedingWeekFridayMonth should be random effect for 
```{r}
#df4$PrecedingWeekFridayMonth <- factor(df4$PrecedingWeekFridayMonth, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

table(df4$PrecedingWeekFridayMonth)
aggregate(WasMondayCloseHigherThanFridayClose ~ PrecedingWeekFridayMonth, data = df4, mean)
library(ggplot2)
ggplot(df4, aes(x = PrecedingWeekFridayMonth, fill = factor(WasMondayCloseHigherThanFridayClose))) +
  geom_bar(position = "fill") +
  ylab("Proportion")

```

```{r}
contingency_table_monthsCLOSE <- table(df4$PrecedingWeekFridayMonth, df4$WasMondayCloseHigherThanFridayClose)
print(contingency_table_monthsCLOSE)
# Perform the Chi-square test
chi_sq_test_monthsCLOSE <- chisq.test(contingency_table_monthsCLOSE)

# Output the result
chi_sq_test_monthsCLOSE
```

```{r}
# Assign new groupings based on seasons
df4$Monthclose <- with(df4, factor(
  ifelse(PrecedingWeekFridayMonth %in% c("Mar", "Jan", "Jun", "Jul", "Sept"), "Odd", "Even")))


# Create a new contingency table with the season groupings
contingency_table_MonthCLOSE <- table(df4$Monthclose, df4$WasMondayCloseHigherThanFridayClose)

# Perform the Chi-square test with the new grouping
chi_sq_test_MonthCLOSE <- chisq.test(contingency_table_MonthCLOSE, correct=FALSE)

# Output the result
chi_sq_test_MonthCLOSE

```

## so, yeah, month should probably be random effect for both MondayOpen and MondayClose models


## finding the model for Y = WasMondayOpenHigherThanFridayClose
```{r}
df8 <- read.csv('data/addingUnemployment/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC_with_month_withUnemployment_finished_electionMonthsAdded.csv', header = TRUE)
#df8 <- rbind(df8[1:220, ], df8[264:nrow(df8), ])
df8$NFPOutcomeIsShock <- ifelse(df8$NFPOutcome == "Shock", 1, 0)
df8$CSIOutcomeIsShock <- ifelse(df8$CSIOutcome == "Shock", 1, 0)
df8$PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO <- (df8$PrecedingWeekFridayVolume) / (df8$PrecedingWeekThursdayVolume)
df8$CSIActualMinusExpected[is.na(df8$CSIActualMinusExpected)] <- 0
df8$Month <- with(df8, factor(
  ifelse(PrecedingWeekFridayMonth %in% c("Mar", "Jan", "May", "Sept"), "Odd", "Even")))
df8$Monthclose <- with(df8, factor(
  ifelse(PrecedingWeekFridayMonth %in% c("Mar", "Jan", "Jun", "Jul", "Sept"), "Odd", "Even")))
df8$FridayVolumeMinusThursdayVolume <- df8$PrecedingWeekFridayVolume - df8$PrecedingWeekThursdayVolume
df8$wasFridayOpenHigherThanThursdayClose <- as.integer(df8$PrecedingWeekFridayOpen > df8$PrecedingWeekThursdayClose)
df8$wasFridayHighHigherThanThursdayHigh <- as.integer(df8$PrecedingWeekFridayHigh > df8$PrecedingWeekThursdayHigh)
df8$wasFridayLowLowerThanThursdayLow <- as.integer(df8$PrecedingWeekFridayLow > df8$PrecedingWeekThursdayLow)
df8$wasFridayHighLowerThanThursdayLow <- as.integer(df8$PrecedingWeekFridayHigh < df8$PrecedingWeekThursdayLow)
df8$wasFridayLowHigherThanThursdayHigh <- as.integer(df8$PrecedingWeekFridayLow > df8$PrecedingWeekThursdayHigh)


null_modelOPEN <- glm(WasMondayOpenHigherThanFridayClose ~ 1, 
                  data = df8, family = binomial)
#summary(null_model)
full_modelOPEN <- glm(WasMondayOpenHigherThanFridayClose ~ didFridayCloseHigherThanThursdayClose + wasFridayIntradayPositive + FridayCloseComparedToThursdayCloseChangeInPercent + FridayIntradayChangeInPercent + fridayWasATripleWitchDay + NFPDayOrNot + NFPOutcome + CSIOutcome + CSIActualMinusExpected + CSIDayOrNot + wasItFOMCWeek + FOMCAction + FOMCActualVSExpected + FOMCActionSpecial + NFPOutcomeIsShock + CSIOutcomeIsShock + PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO + FOMCActualVSExpected + FOMCActionSpecial + FridayVolumeMinusThursdayVolume + wasFridayOpenHigherThanThursdayClose + FOMCPivotAction + UnemploymentRateOutcome + wasFridayLowLowerThanThursdayLow + wasFridayHighLowerThanThursdayLow + wasFridayLowHigherThanThursdayHigh + wasItPresidentialElectionWeek, 
                  data = df8, family = binomial)
#summary(full_model)



forward_modelOPEN <- step(null_modelOPEN, 
                      scope = list(lower = null_modelOPEN, upper = full_modelOPEN), 
                      direction = "forward",
                      trace = 0)

summary(forward_modelOPEN)
```


```{r}
#backward_modelOPEN <- step(full_modelOPEN, direction = "backward", trace=0)
#summary(backward_modelOPEN)
```

## the two models for Y = WasMondayOpenHigherThanFridayClose
```{r}
non_random_modelOPEN <- glm(formula = WasMondayOpenHigherThanFridayClose ~ CSIOutcomeIsShock + 
    wasFridayIntradayPositive + FridayIntradayChangeInPercent + 
    CSIActualMinusExpected + didFridayCloseHigherThanThursdayClose, family = binomial, 
    data = df8)


summary(non_random_modelOPEN)


library(lme4)
mixed_modelOPEN <- glmer(formula = WasMondayOpenHigherThanFridayClose ~ CSIOutcomeIsShock + 
    wasFridayIntradayPositive + FridayIntradayChangeInPercent + 
    CSIActualMinusExpected + didFridayCloseHigherThanThursdayClose + (1 | Month), family = binomial, 
    data = df8)


summary(mixed_modelOPEN)
```



## finding the model for Y = WasMondayCloseHigherThanFridayClose
```{r}
#df8 <- read.csv('data/addingFOMC/SPY_ready_for_analysis_triple_witch_NFP_CSI_FOMC_with_month.csv', header = TRUE)
#df8$NFPOutcomeIsShock <- ifelse(df8$NFPOutcome == "Shock", 1, 0)
#df8$CSIOutcomeIsShock <- ifelse(df8$CSIOutcome == "Shock", 1, 0)
#df8$PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO <- (df8$PrecedingWeekFridayVolume) / (df8$PrecedingWeekThursdayVolume)
#df8$CSIActualMinusExpected[is.na(df8$CSIActualMinusExpected)] <- 0

null_modelCLOSE <- glm(WasMondayCloseHigherThanFridayClose ~ 1, 
                  data = df8, family = binomial)
#summary(null_model)
full_modelCLOSE <- glm(WasMondayOpenHigherThanFridayClose ~ didFridayCloseHigherThanThursdayClose + wasFridayIntradayPositive + FridayCloseComparedToThursdayCloseChangeInPercent + FridayIntradayChangeInPercent + fridayWasATripleWitchDay + NFPDayOrNot + NFPOutcome + CSIOutcome + CSIActualMinusExpected + CSIDayOrNot + wasItFOMCWeek + FOMCAction + FOMCActualVSExpected + FOMCActionSpecial + NFPOutcomeIsShock + CSIOutcomeIsShock + PrecedingWeekFridayVolumePrecedingWeekThursdayVolumeRATIO + FOMCActualVSExpected + FOMCActionSpecial + FridayVolumeMinusThursdayVolume + wasFridayOpenHigherThanThursdayClose + FOMCPivotAction + UnemploymentRateOutcome + wasFridayLowLowerThanThursdayLow + wasFridayHighLowerThanThursdayLow + wasFridayLowHigherThanThursdayHigh + wasItPresidentialElectionWeek, 
                  data = df8, family = binomial)
#summary(full_model)



forward_modelCLOSE <- step(null_modelCLOSE, 
                      scope = list(lower = null_modelCLOSE, upper = full_modelCLOSE), 
                      direction = "forward",
                      trace = 0)

summary(forward_modelCLOSE)
```


```{r}
#backward_modelCLOSE <- step(full_modelCLOSE, direction = "backward", trace=0)
#summary(backward_modelCLOSE)
```


## the two models for Y = WasMondayCloseHigherThanFridayClose
```{r}
non_random_modelCLOSE <- glm(formula = WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + 
    wasFridayHighLowerThanThursdayLow + fridayWasATripleWitchDay + 
    CSIActualMinusExpected + CSIOutcome + wasFridayIntradayPositive, family = binomial, 
    data = df8)


summary(non_random_modelCLOSE)



library(lme4)
mixed_modelCLOSE <- glmer(WasMondayCloseHigherThanFridayClose ~ NFPOutcomeIsShock + 
    wasFridayHighLowerThanThursdayLow + fridayWasATripleWitchDay + 
    CSIActualMinusExpected + CSIOutcome + wasFridayIntradayPositive + 
                     (1 | Monthclose), 
                     family = binomial, data = df8)
summary(mixed_modelCLOSE)
```






```{r}
#library(lme4)
anova(non_random_modelOPEN, mixed_modelOPEN)
anova(non_random_modelCLOSE, mixed_modelCLOSE)

```





## adding in the four model's predict actions in df8
```{r}

df8$non_random_modelOPEN_predict <- as.integer(predict(non_random_modelOPEN, type = "response") > 0.5)
df8$mixed_modelOPEN_predict <- as.integer(predict(mixed_modelOPEN, re.form = NULL, type = "response") > 0.5)

df8$non_random_modelCLOSE_predict <- as.integer(predict(non_random_modelCLOSE, type = "response") > 0.5)
df8$mixed_modelCLOSE_predict <- as.integer(predict(mixed_modelCLOSE, re.form = NULL, type = "response") > 0.5)


#1. compare df8$non_random_modelOPEN_predict and df8$mixed_modelOPEN_predict and count how many times they are different
difference_count_OPEN <- sum(df8$non_random_modelOPEN_predict != df8$mixed_modelOPEN_predict)
print(paste("Number of times the predictions differ for OPEN models:", difference_count_OPEN))

#2. compare df8$non_random_modelCLOSE_predict and df8$mixed_modelCLOSE_predict and count how many times they are different
difference_count_CLOSE <- sum(df8$non_random_modelCLOSE_predict != df8$mixed_modelCLOSE_predict)
print(paste("Number of times the predictions differ for CLOSE models:", difference_count_CLOSE))
```

## model accuracy for OPEN
```{r}
non_random_model_right_wrongOPEN <- c(0, 0)
mixed_model_right_wrongOPEN <- c(0, 0)

# Iterate through each row of df8
for (i in 1:nrow(df8)) {
  # For the non-random model
  if (df8$WasMondayOpenHigherThanFridayClose[i] == df8$non_random_modelOPEN_predict[i]) {
    non_random_model_right_wrongOPEN[1] <- non_random_model_right_wrongOPEN[1] + 1
  } else {
    non_random_model_right_wrongOPEN[2] <- non_random_model_right_wrongOPEN[2] + 1
  }

  # For the mixed model
  if (df8$WasMondayOpenHigherThanFridayClose[i] == df8$mixed_modelOPEN_predict[i]) {
    mixed_model_right_wrongOPEN[1] <- mixed_model_right_wrongOPEN[1] + 1
  } else {
    mixed_model_right_wrongOPEN[2] <- mixed_model_right_wrongOPEN[2] + 1
  }
}

# Print the results
print("non_random_model_right_wrongOPEN")
print(non_random_model_right_wrongOPEN)
print(non_random_model_right_wrongOPEN[1] / (non_random_model_right_wrongOPEN[1] + non_random_model_right_wrongOPEN[2]))

print("mixed_model_right_wrongOPEN")
print(mixed_model_right_wrongOPEN)
print(mixed_model_right_wrongOPEN[1] / (mixed_model_right_wrongOPEN[1] + mixed_model_right_wrongOPEN[2]))
print("total stats")
print(sum(df8$WasMondayOpenHigherThanFridayClose) / nrow(df8))
```


## model accuracy for CLOSE
```{r}
non_random_model_right_wrongCLOSE <- c(0, 0)
mixed_model_right_wrongCLOSE <- c(0, 0)

# Iterate through each row of df8
for (i in 1:nrow(df8)) {
  # For the non-random model
  if (df8$WasMondayCloseHigherThanFridayClose[i] == df8$non_random_modelCLOSE_predict[i]) {
    non_random_model_right_wrongCLOSE[1] <- non_random_model_right_wrongCLOSE[1] + 1
  } else {
    non_random_model_right_wrongCLOSE[2] <- non_random_model_right_wrongCLOSE[2] + 1
  }

  # For the mixed model
  if (df8$WasMondayCloseHigherThanFridayClose[i] == df8$mixed_modelCLOSE_predict[i]) {
    mixed_model_right_wrongCLOSE[1] <- mixed_model_right_wrongCLOSE[1] + 1
  } else {
    mixed_model_right_wrongCLOSE[2] <- mixed_model_right_wrongCLOSE[2] + 1
  }
}

# Print the results
print("non_random_model_right_wrongCLOSE")
print(non_random_model_right_wrongCLOSE)
print(non_random_model_right_wrongCLOSE[1] / (non_random_model_right_wrongCLOSE[1] + non_random_model_right_wrongCLOSE[2]))

print("mixed_model_right_wrongCLOSE")
print(mixed_model_right_wrongCLOSE)
print(mixed_model_right_wrongCLOSE[1] / (mixed_model_right_wrongCLOSE[1] + mixed_model_right_wrongCLOSE[2]))

print("total stats")
print(sum(df8$WasMondayCloseHigherThanFridayClose) / nrow(df8))
```





```{r}
# save df to .csv
# Save df8 to a CSV file
write.csv(df8, file = "results/SPY_non_mixed_and_mixed_modelOPENandCLOSEpredicts.csv", row.names = FALSE)

```



## nothing below here 12.15.2023 1 34pm

